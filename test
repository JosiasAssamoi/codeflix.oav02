
let fs = require('fs')
const path = require('path')
const {Transform} = require('stream')

function getCopyFileName(fileName) {
    const ext = path.extname(fileName)
        const base = path.basename(fileName, ext)
        return `${base}.copy${ext}`
}

// duplique un fichier 
function duplicate(fileName){
    const copyFileName = getCopyFileName(fileName)
    let file = fs.createReadStream(fileName)
    let status = 0
    let  copy = fs.createWriteStream(copyFileName)
    fs.stat(fileName , (error,stat) => {
        file.on('data',(chunk) => {
            status += chunk.length
            console.log(Math.round(100 * status / stat.size) + "%")
            } )
        } 
    )
    // tunnel cad affectation de file dans copy
    file.pipe(copy)

    // a la fin de la copie
    copy.on('finish', () => {
        console.log(`${fileName} succesfully duplicated`)
    })

}

// transform un fichier
function transform(fileName,re,cb,in_stdout=false){
    const copyFileName = getCopyFileName(fileName)
    let file = fs.createReadStream(fileName)
    let copy = fs.createWriteStream(copyFileName)

    if (in_stdout){
        content=''
        file.on('data', chunk => {
            content += chunk.toString().replace(re,cb)
        })
        file.on('end',() => {
            console.log(content)
        } )
    } 
    else{
        const tstream = new Transform({
            transform(chunk,encoding,callback){
                this.push(chunk.toString().replace(re,cb))
                callback()
            }
        })
        file.pipe(tstream).pipe(copy)
    }



}

function csv2json(fileName){
    // create the read stream 
    let csvFile = fs.createReadStream(fileName)
    // nom du fichier que l'on va create
    const jsonFileName = `${path.basename(fileName, path.extname(fileName))}.json`
    // create the write stream
    let jsonFile = fs.createWriteStream(jsonFileName)
    // create the transform stream 
    const tstream= new Transform({transform(chunk,econding,callback){
        let chunkString = chunk.toString().split('\n')
        const headers = chunkString[0].split(';')
        let myCsv = []
        for (let i = 1 ; i < chunkString.length ;  i++){
            // check si not empty 
            if(chunkString[i]){
                // get elts de la line 
                let line = chunkString[i].split(';')
                newObj = {}
                for(let j =0 ; j <headers.length; j++ ){
                    if(['birth','death'].includes(headers[j])){
                        line[j]=line[j].replace(/(\d{4})(\d{2})(\d{2})/, "$1-$2-$3")
                    }
                    else if (headers[j]=='activities'){
                        line[j]=line[j].split(',').map((str)=> {return str.toLowerCase()})
                    }
                    newObj[headers[j]]=line[j]
                }
                myCsv.push(newObj)
            }
        }
       // envoie dans tstreamm le contenu 
        this.push(JSON.stringify(myCsv,null,'\t')) //
        callback()
        }
    })
    // tunnel to transform puis vers le new file csv
    csvFile.pipe(tstream).pipe(jsonFile)
    jsonFile.on('finish', () => {console.log(`${jsonFileName} succesfully created`)})
}

function catPipeWc(directory,type,cb){
       let wordCount = 1 
       let promise = new Promise(function(resolve, reject) {
        let files = fs.readdirSync(directory).filter(item => item.endsWith(type))
        files.forEach(file => {
            let newFile= fs.createReadStream(file)
            let test= fs.createWriteStream("test")
                newFile.on('data', chunck => {
                    let data = chunck.toString()
                    wordCount+=data.length
                }).on('end', () => resolve(wordCount))
                newFile.pipe(test)
        }) 
        })   
       promise.then(function(wordCount) {
       cb(wordCount)
      });
  

         

}









module.exports = {
    duplicate,transform,csv2json,catPipeWc
}
